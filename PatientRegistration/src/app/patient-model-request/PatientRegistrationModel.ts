//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5132";
    }

    /**
     * @return OK
     */
    getAll(): Promise<PatientDto[]> {
        let url_ = this.baseUrl + "/Patient/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<PatientDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PatientDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PatientDto[]>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id: number | undefined): Promise<PatientDto> {
        let url_ = this.baseUrl + "/Patient/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<PatientDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PatientDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PatientDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    desactive(id: number | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Patient/Desactive?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactive(_response);
        });
    }

    protected processDesactive(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    createOrEditPatient(body: PatientDto): Promise<boolean> {
        let url_ = this.baseUrl + "/Patient/CreateOrEditPatient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrEditPatient(_response);
        });
    }

    protected processCreateOrEditPatient(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException(_responseText, status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    getAllAgreements(): Promise<AgreementDto[]> {
        let url_ = this.baseUrl + "/Patient/GetAllAgreements";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllAgreements(_response);
        });
    }

    protected processGetAllAgreements(response: Response): Promise<AgreementDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AgreementDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AgreementDto[]>(null as any);
    }
}

export class AgreementDto implements IAgreementDto {
    agreementId?: number;
    agreementName?: string;

    [key: string]: any;

    constructor(data?: IAgreementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.agreementId = _data["agreementId"];
            this.agreementName = _data["agreementName"];
        }
    }

    static fromJS(data: any): AgreementDto {
        data = typeof data === 'object' ? data : {};
        let result = new AgreementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["agreementId"] = this.agreementId;
        data["agreementName"] = this.agreementName;
        return data;
    }
}

export interface IAgreementDto {
    agreementId?: number;
    agreementName?: string;

    [key: string]: any;
}

export class PatientDto implements IPatientDto {
    patientId?: number;
    name?: string;
    surName?: string;
    dateBirth?: Date;
    cpf?: string;
    rg?: string;
    ufRg?: string;
    email?: string;
    cellphone?: string;
    phone?: string;
    agreementId?: number;
    cardNumber?: string;
    cardValidate?: Date;
    gender?: string;

    [key: string]: any;

    constructor(data?: IPatientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.patientId = _data["patientId"];
            this.name = _data["name"];
            this.surName = _data["surName"];
            this.dateBirth = _data["dateBirth"] ? new Date(_data["dateBirth"].toString()) : <any>undefined;
            this.cpf = _data["cpf"];
            this.rg = _data["rg"];
            this.ufRg = _data["ufRg"];
            this.email = _data["email"];
            this.cellphone = _data["cellphone"];
            this.phone = _data["phone"];
            this.agreementId = _data["agreementId"];
            this.cardNumber = _data["cardNumber"];
            this.cardValidate = _data["cardValidate"] ? new Date(_data["cardValidate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): PatientDto {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["patientId"] = this.patientId;
        data["name"] = this.name;
        data["surName"] = this.surName;
        data["dateBirth"] = this.dateBirth ? this.dateBirth.toISOString() : <any>undefined;
        data["cpf"] = this.cpf;
        data["rg"] = this.rg;
        data["ufRg"] = this.ufRg;
        data["email"] = this.email;
        data["cellphone"] = this.cellphone;
        data["phone"] = this.phone;
        data["agreementId"] = this.agreementId;
        data["cardNumber"] = this.cardNumber;
        data["cardValidate"] = this.cardValidate ? this.cardValidate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        return data;
    }
}

export interface IPatientDto {
    patientId?: number;
    name?: string;
    surName?: string;
    dateBirth?: Date;
    cpf?: string;
    rg?: string;
    ufRg?: string;
    email?: string;
    cellphone?: string;
    phone?: string;
    agreementId?: number;
    cardNumber?: string;
    cardValidate?: Date;
    gender?: string;

    [key: string]: any;
}

export class ApiException extends Error {
    //message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}